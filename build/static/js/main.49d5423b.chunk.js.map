{"version":3,"sources":["reducers/index.js","store/index.js","github/index.js","layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","publicrepo","followers","following","publicgists","store","createStore","dispatch","Wrapper","styled","div","GithubForm","onSubmit","useState","username","setUsername","handleClick","event","a","preventDefault","suffix","AudioOutlined","style","fontSize","color","value","onChange","target","toLowerCase","placeholder","required","onClick","hover","Footer","background","position","bottom","width","textAlign","height","href","textDecoration","App","users","setUser","useEffect","usernamesTmp","window","location","search","split","length","forEach","fetchUsers","storedUsers","localStorage","getItem","pageUrl","Object","keys","JSON","parse","join","history","pushState","getUsers","fetch","res","status","json","userData","newStoredUsers","assign","setItem","stringify","console","log","className","onBack","title","subTitle","sortedUser","user","push","sort","b","public_repos","c","d","public_gists","map","key","id","login","src","avatar_url","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49d5423b.chunk.js","sourcesContent":["import {createStore} from 'redux'\r\nexport const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"PUBLIC REPO\":\r\n        return { ...state, publicrepo: action.publicrepo };\r\n      case \"FOLLOWERS\":\r\n        return { ...state, followers: action.followers };\r\n      case \"FOLLOWING\":\r\n        return { ...state, following: action.following };\r\n        case \"PUBLICGISTS\":\r\n            return{...state,publicgists: action.publicgists};\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  let store = createStore(reducer)\r\n \r\n  store.dispatch({ type: 'PUBLIC REPO' })\r\n  store.dispatch({ type: 'FOLLOWERS' })\r\n  store.dispatch({type:'FOLLOWING'})\r\n  store.dispatch({type:'PUBLICGISTS'})\r\n  ","import { createStore } from \"redux\";\r\nimport { reducer } from \"../reducers/index\";\r\n\r\n//create redux store\r\nexport const store = createStore(reducer);\r\n","import React, { useState } from \"react\";\nimport { Button, Input } from \"antd\";\nimport styled from \"styled-components\";\nimport { AudioOutlined } from '@ant-design/icons';\nconst Wrapper = styled.div`\n  display:flex;\n`;\nconst GithubForm = ({ onSubmit }) => {\n  const [username, setUsername] = useState(\"\");\n\n  const handleClick = async (event) => {\n    event.preventDefault();\n    await onSubmit(username);\n    setUsername(\"\");\n  };\n  \n  const suffix = (\n    <AudioOutlined\n      style={{\n        fontSize: 16,\n        color: '#1890ff',\n      }}\n    />\n  );\n  \n  return (\n    <Wrapper>\n      <Input\n        type=\"text\"\n        suffix={suffix}\n        value={username}\n        onChange={({ target }) => setUsername(target.value.toLowerCase())}\n        placeholder=\"GitHub username\"\n        required\n      />\n      <Button onClick={handleClick} style={{color:'#01CBC6',hover:'#01CBC6'}}>Compare</Button>\n    </Wrapper>\n  );\n};\n\nexport default GithubForm;\n","import React from \"react\";\r\n\r\n// Footer component\r\nconst Footer = () => {\r\n  const style = {\r\n    background: \"#24292e\",\r\n    color: \"white\",\r\n    position: \"fixed\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    height: \"30px\",\r\n  };\r\n  const anchorStyle = {\r\n    color: \"white\",\r\n    textDecoration: \"none\"\r\n  };\r\n  return (\r\n    <footer style={style}>\r\n      <a href=\"https://www.boardinfinity.com/\" style={anchorStyle}>\r\n        CopyRight@ BoardInfinity\r\n      </a>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport GithubForm from \"./github\";\nimport { Card } from \"antd\";\nimport styled from \"styled-components\";\nimport Footer from \"./layout/Footer\"\nimport { PageHeader } from 'antd';\nimport './index.css'\nconst Wrapper = styled.div`\n  display:flex;\n  margin: -1rem;\n`;\n\nfunction App() {\n  const [users, setUser] = useState(null);\n\n  useEffect(() => {\n    const { search } = window.location;\n    const usernamesTmp = search.split(\"?usernames=\");\n    const usernames = usernamesTmp[usernamesTmp.length - 1].split(\",\");\n    const allUserData = [];\n    usernames.forEach(async (username) => {\n      await fetchUsers(username);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getUsers = async () => {\n      const storedUsers = localStorage.getItem(\"users\");\n      if (storedUsers) {\n        const pageUrl = `?usernames=${Object.keys(JSON.parse(storedUsers)).join(\n          \",\"\n        )}`;\n        window.history.pushState(\"\", \"\", pageUrl);\n        setUser(JSON.parse(storedUsers));\n      }\n    };\n\n    getUsers();\n  }, []);\n\n  const fetchUsers = async (username) => {\n    try {\n      const res = await fetch(`https://api.github.com/users/${username}`);\n      if (res.status === 200) {\n        const userData = await res.json();\n        const storedUsers = await localStorage.getItem(\"users\");\n        if (storedUsers) {\n          const newStoredUsers = Object.assign({}, JSON.parse(storedUsers), {\n            [username]: userData,\n          });\n          setUser(newStoredUsers);\n          localStorage.setItem(\"users\", JSON.stringify(newStoredUsers));\n          const pageUrl = `?usernames=${Object.keys(newStoredUsers).join(\",\")}`;\n          window.history.pushState(\"\", \"\", pageUrl);\n        } else {\n          setUser({ [username]: userData });\n          localStorage.setItem(\n            \"users\",\n            JSON.stringify({ [username]: userData })\n          );\n          const pageUrl = `?usernames=${username}`;\n          window.history.pushState(\"\", \"\", pageUrl);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const sortedUser = () => {\n    let sortedUser = [];\n    if (users && typeof users === \"object\") {\n      for (const user in users) {\n        sortedUser.push(users[user]);\n      }\n    }\n    sortedUser.sort((a, b) => b.public_repos - a.public_repos);\n    sortedUser.sort((c,d) => d.public_gists - c.public_gists);\n    return sortedUser;\n  };\n\n  return (\n    \n    <div>\n      <PageHeader\n    className=\"site-page-header\"\n    onBack={() => null}\n    title=\"BoardInfinity\"\n    subTitle=\"GITHUB PROFILE COMPARE\"\n  />,\n      \n      <Wrapper>\n        {users &&\n          sortedUser().map((user) => (\n            <Card key={user.id} title={user.login} style={{ width: 300 }}>\n            <img src={user.avatar_url} className=\"img-thumbnail\" style={{height:150,width:150}} />\n              <p>Public Repos: {user.public_repos}</p>\n              <p>Followers: {user.followers}</p>\n              <p>Following: {user.following}</p>\n              <p>Public Gists:{user.public_gists} </p>\n            </Card>\n            \n          ))}\n      </Wrapper>\n      \n      <GithubForm onSubmit={fetchUsers} />\n      <Footer />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\"\nimport {store} from \"./store/index\"\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store= {store} >\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}